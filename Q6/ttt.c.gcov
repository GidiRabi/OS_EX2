        -:    0:Source:ttt.c
        -:    0:Graph:ttt.gcno
        -:    0:Data:ttt.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <string.h>
        -:    4:
        -:    5:#define BOARD_SIZE 9
        -:    6:
        6:    7:void print_board(char* board) {
       24:    8:    for (int i = 0; i < 3; ++i) {
       18:    9:        printf(" %c | %c | %c \n", board[i * 3 + 0], board[i * 3 + 1], board[i * 3 + 2]);
       18:   10:        if (i < 2) {
       12:   11:            printf("---+---+---\n");
       12:   12:        }
       18:   13:    }
        6:   14:    printf("\n");
        6:   15:}
        -:   16:
        6:   17:int check_win(char* board, char player) {
        6:   18:    const int WINNING_COMBOS[8][3] = {
        -:   19:        {0, 1, 2}, {3, 4, 5}, {6, 7, 8}, // rows
        -:   20:        {0, 3, 6}, {1, 4, 7}, {2, 5, 8}, // columns
        -:   21:        {0, 4, 8}, {2, 4, 6}  // diagonals
        -:   22:    };
        -:   23:
       53:   24:    for (int i = 0; i < 8; ++i) {
       53:   25:        if (board[WINNING_COMBOS[i][0]] == player &&
       19:   26:            board[WINNING_COMBOS[i][1]] == player &&
        5:   27:            board[WINNING_COMBOS[i][2]] == player) {
        1:   28:            return 1;
        -:   29:        }
       47:   30:    }
        -:   31:
        5:   32:    return 0;
        6:   33:}
        -:   34:
        1:   35:int main(int argc, char *argv[]) {
        1:   36:    if (argc != 2 || strlen(argv[1]) != BOARD_SIZE) {
    #####:   37:        printf("Error\n");
    #####:   38:        exit(1);
        -:   39:    }
        -:   40:
        1:   41:    char* strategy = argv[1];
        1:   42:    int digit_count[10] = {0};
       10:   43:    for (int i = 0; i < BOARD_SIZE; i++) {
        9:   44:        if (strategy[i] < '1' || strategy[i] > '9' || ++digit_count[strategy[i] - '0'] > 1) {
    #####:   45:            printf("Error\n");
    #####:   46:            exit(1);
        -:   47:        }
        9:   48:    }
        -:   49:
        -:   50:    char board[BOARD_SIZE];
       10:   51:    for (int i = 0; i < BOARD_SIZE; i++) {
        9:   52:        board[i] = ' ';
        9:   53:    }
        1:   54:    int move_count = 0;
        -:   55:
        3:   56:    while (1) {
        -:   57:        int move;
        3:   58:        do {
        4:   59:            if (move_count >= BOARD_SIZE) {
    #####:   60:                printf("DRAW\n");
    #####:   61:                return 0;
        -:   62:            }
        4:   63:            move = strategy[move_count++] - '0' - 1;
        4:   64:        } while (board[move] != ' ');
        -:   65:
        3:   66:        printf("Computer's turn: %d\n", move + 1);
        3:   67:        board[move] = 'X';
        3:   68:        print_board(board);
        -:   69:
        3:   70:        if (check_win(board, 'X')) {
    #####:   71:            printf("\033[1;32mI win \033[0m\n");
    #####:   72:            break;
        -:   73:        }
        -:   74:
        3:   75:        printf("Human's turn: ");
        3:   76:        scanf("%d", &move);
        3:   77:        printf("\n");
        3:   78:        move--;
        -:   79:
        3:   80:        if (move < 0 || move >= BOARD_SIZE || board[move] != ' ') {
    #####:   81:            printf("Error\n");
    #####:   82:            exit(1);
        -:   83:        }
        -:   84:
        3:   85:        board[move] = 'O';
        3:   86:        print_board(board);
        -:   87:
        3:   88:        if (check_win(board, 'O')) {
        1:   89:            printf("\033[1;31mI lost \033[0m\n");
        1:   90:            break;
        -:   91:        }
        -:   92:    }
        -:   93:
        1:   94:    return 0;
        1:   95:}
